#ifdef GPU
  module asyncio_gpu
#else
  module asyncio
#endif

  interface asyncio_read_begin
    module procedure asyncio_read_begin_default_unit_default_format
    module procedure asyncio_read_begin_default_unit_formatted
    module procedure asyncio_read_begin_unit_unformatted
    module procedure asyncio_read_begin_unit_default_format
    module procedure asyncio_read_begin_unit_formatted
  end interface asyncio_read_begin

  interface asyncio_write_begin
    module procedure asyncio_write_begin_default_unit_default_format
    module procedure asyncio_write_begin_default_unit_formatted
    module procedure asyncio_write_begin_unit_unformatted
    module procedure asyncio_write_begin_unit_default_format
    module procedure asyncio_write_begin_unit_formatted
  end interface asyncio_write_begin

#ifndef GPU
  interface asyncio_read
    module procedure asyncio_read_integer
    module procedure asyncio_read_long_long
    module procedure asyncio_read_float
    module procedure asyncio_read_double
    module procedure asyncio_read_logical
    module procedure asyncio_read_char
    module procedure asyncio_read_char_array1d
    module procedure asyncio_read_char_array2d
    module procedure asyncio_read_logical_array1d
    module procedure asyncio_read_integer_array1d
    module procedure asyncio_read_integer_array2d
    module procedure asyncio_read_float_array1d
    module procedure asyncio_read_double_array1d
    module procedure asyncio_read_double_array2d
    module procedure asyncio_read_double_array3d
    module procedure asyncio_read_double_array4d
  end interface asyncio_read
#endif
  
  interface asyncio_write
    module procedure asyncio_write_integer
    module procedure asyncio_write_long_long
    module procedure asyncio_write_float
    module procedure asyncio_write_double
    module procedure asyncio_write_logical
#ifndef GPU
    module procedure asyncio_write_char
    module procedure asyncio_write_char_array1d
    module procedure asyncio_write_char_array2d
#endif
    module procedure asyncio_write_logical_array1d
    module procedure asyncio_write_integer_array1d
    module procedure asyncio_write_integer_array2d
    module procedure asyncio_write_float_array1d
    module procedure asyncio_write_double_array1d
    module procedure asyncio_write_double_array2d
    module procedure asyncio_write_double_array3d
    module procedure asyncio_write_double_array4d
  end interface asyncio_write

  interface

  subroutine asyncio_open(unit, file, form, status)
    implicit none
    integer :: unit
    character :: file*(*)
    character :: form*(*)
    character, optional :: status*(*)
  end subroutine asyncio_open

  subroutine asyncio_close(unit)
    implicit none
    integer :: unit
  end subroutine asyncio_close

  subroutine asyncio_rewind(unit)
    implicit none
    integer :: unit
  end subroutine asyncio_rewind

  subroutine asyncio_endfile(unit)
    implicit none
    integer ::unit
  end subroutine asyncio_endfile

  subroutine asyncio_backspace(unt)
    implicit none
    integer ::unt
  end subroutine asyncio_backspace

#ifdef GPU
    attributes(device) &
#endif
    subroutine asyncio_begin_default_unit_default_format_c(mode, unt, frmt, iostat) bind(C)
    use iso_c_binding
    implicit none
    character(c_char), value :: mode, unt, frmt
    integer(c_int) :: iostat
    end subroutine asyncio_begin_default_unit_default_format_c

#ifdef GPU
    attributes(device) &
#endif
    subroutine asyncio_begin_unit_unformatted_c(mode, unt, iostat) bind(C)
    use iso_c_binding
    implicit none
    character(c_char), value :: mode
    integer(c_int), value :: unt
    integer(c_int) :: iostat
    end subroutine asyncio_begin_unit_unformatted_c

#ifdef GPU
    attributes(device) &
#endif
    subroutine asyncio_begin_unit_default_format_c(mode, unt, frmt, iostat) bind(C)
    use iso_c_binding
    implicit none
    character(c_char), value :: mode
    integer(c_int), value :: unt
    character(c_char), value :: frmt
    integer(c_int) :: iostat
    end subroutine asyncio_begin_unit_default_format_c

#ifdef GPU
    attributes(device) &
#endif
    subroutine asyncio_begin_default_unit_formatted_c(mode, unt, func, frmt, iostat) bind(C)
    use iso_c_binding
    implicit none
    character(c_char), value :: mode
    character(c_char), value :: unt
    integer :: func
    integer(c_int), value :: frmt
    integer(c_int) :: iostat
    end subroutine asyncio_begin_default_unit_formatted_c

#ifdef GPU
    attributes(device) &
#endif
    subroutine asyncio_begin_unit_formatted_c(mode, unt, func, frmt, iostat) bind(C)
    use iso_c_binding
    implicit none
    character(c_char), value :: mode
    integer(c_int), value :: unt
    integer :: func
    integer(c_int), value :: frmt
    integer(c_int) :: iostat
    end subroutine asyncio_begin_unit_formatted_c

    subroutine asyncio_read_integer_c(val) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int) :: val
    end subroutine asyncio_read_integer_c

    subroutine asyncio_read_long_long_c(val) bind(C)
    use iso_c_binding
    implicit none
    integer(c_long_long) :: val
    end subroutine asyncio_read_long_long_c

    subroutine asyncio_read_float_c(val) bind(C)
    use iso_c_binding
    implicit none
    real(c_float) :: val
    end subroutine asyncio_read_float_c

    subroutine asyncio_read_double_c(val) bind(C)
    use iso_c_binding
    implicit none
    real(c_double) :: val
    end subroutine asyncio_read_double_c

    subroutine asyncio_read_logical_c(val) bind(C)
    use iso_c_binding
    implicit none
    logical(c_bool) :: val
    end subroutine asyncio_read_logical_c

    subroutine asyncio_read_char_c(val, length) bind(C)
    use iso_c_binding
    implicit none
    character(c_char) :: val
    integer(c_int), value :: length
    end subroutine asyncio_read_char_c

    subroutine asyncio_read_char_array1d_c(val, dim_1, lengths) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1
    character(c_char) :: val(dim_1, *)
    integer(c_int) :: lengths(dim_1)
    end subroutine asyncio_read_char_array1d_c

    subroutine asyncio_read_char_array2d_c(val, dim_1, dim_2, lengths) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1, dim_2
    character(c_char) :: val(dim_1, dim_2, *)
    integer(c_int) :: lengths(dim_1, dim_2)
    end subroutine asyncio_read_char_array2d_c

    subroutine asyncio_read_logical_array1d_c(val, dim_1) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1
    logical :: val(dim_1)
    end subroutine asyncio_read_logical_array1d_c

    subroutine asyncio_read_integer_array1d_c(val, dim_1) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1
    integer(c_int) :: val(dim_1)
    end subroutine asyncio_read_integer_array1d_c

    subroutine asyncio_read_integer_array2d_c(val, dim_1, dim_2) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1, dim_2
    integer(c_int) :: val(dim_1,dim_2)
    end subroutine asyncio_read_integer_array2d_c

    subroutine asyncio_read_float_array1d_c(val, dim_1) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1
    real(c_float) :: val(dim_1)
    end subroutine asyncio_read_float_array1d_c

    subroutine asyncio_read_double_array1d_c(val, dim_1) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1
    real(c_double) :: val(dim_1)
    end subroutine asyncio_read_double_array1d_c

    subroutine asyncio_read_double_array2d_c(val, dim_1, dim_2) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1, dim_2
    real(c_double) :: val(dim_1,dim_2)
    end subroutine asyncio_read_double_array2d_c

    subroutine asyncio_read_double_array3d_c(val, dim_1, dim_2, dim_3) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1, dim_2, dim_3
    real(c_double) :: val(dim_1,dim_2,dim_3)
    end subroutine asyncio_read_double_array3d_c

    subroutine asyncio_read_double_array4d_c(val, dim_1, dim_2, dim_3, dim_4) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1, dim_2, dim_3, dim_4
    real(c_double) :: val(dim_1,dim_2,dim_3,dim_4)
    end subroutine asyncio_read_double_array4d_c

#ifdef GPU
    attributes(device) &
#endif
    subroutine asyncio_write_integer_c(val) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: val
    end subroutine asyncio_write_integer_c

#ifdef GPU
    attributes(device) &
#endif
    subroutine asyncio_write_long_long_c(val) bind(C)
    use iso_c_binding
    implicit none
    integer(c_long_long), value :: val
    end subroutine asyncio_write_long_long_c

#ifdef GPU
    attributes(device) &
#endif
    subroutine asyncio_write_float_c(val) bind(C)
    use iso_c_binding
    implicit none
    real(c_float), value :: val
    end subroutine asyncio_write_float_c

#ifdef GPU
    attributes(device) &
#endif
    subroutine asyncio_write_double_c(val) bind(C)
    use iso_c_binding
    implicit none
    real(c_double), value :: val
    end subroutine asyncio_write_double_c

#ifdef GPU
    attributes(device) &
#endif
    subroutine asyncio_write_logical_c(val) bind(C)
    use iso_c_binding
    implicit none
    logical(c_bool), value :: val
    end subroutine asyncio_write_logical_c

#ifdef GPU
    attributes(device) &
#endif
    subroutine asyncio_write_char_c(val, length) bind(C)
    use iso_c_binding
    implicit none
    character(c_char) :: val
    integer(c_int), value :: length
    end subroutine asyncio_write_char_c

#ifdef GPU
    attributes(device) &
#endif
    subroutine asyncio_write_char_array1d_c(val, dim_1, lengths) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1
    character(c_char) :: val(dim_1, *)
    integer(c_int) :: lengths(dim_1)
    end subroutine asyncio_write_char_array1d_c

#ifdef GPU
    attributes(device) &
#endif
    subroutine asyncio_write_char_array2d_c(val, dim_1, dim_2, lengths) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1, dim_2
    character(c_char) :: val(dim_1, dim_2, *)
    integer(c_int) :: lengths(dim_1, dim_2)
    end subroutine asyncio_write_char_array2d_c

#ifdef GPU
  attributes(device) &
#endif
    subroutine asyncio_write_logical_array1d_c(val, dim_1) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1
    logical :: val(dim_1)
    end subroutine asyncio_write_logical_array1d_c

#ifdef GPU
  attributes(device) &
#endif
    subroutine asyncio_write_integer_array1d_c(val, dim_1) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1
    integer(c_int) :: val(dim_1)
    end subroutine asyncio_write_integer_array1d_c

#ifdef GPU
  attributes(device) &
#endif
    subroutine asyncio_write_integer_array2d_c(val, dim_1, dim_2) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1, dim_2
    integer(c_int) :: val(dim_1,dim_2)
    end subroutine asyncio_write_integer_array2d_c

#ifdef GPU
  attributes(device) &
#endif
    subroutine asyncio_write_float_array1d_c(val, dim_1) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1
    real(c_float) :: val(dim_1)
    end subroutine asyncio_write_float_array1d_c

#ifdef GPU
  attributes(device) &
#endif
    subroutine asyncio_write_double_array1d_c(val, dim_1) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1
    real(c_double) :: val(dim_1)
    end subroutine asyncio_write_double_array1d_c

#ifdef GPU
  attributes(device) &
#endif
    subroutine asyncio_write_double_array2d_c(val, dim_1, dim_2) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1, dim_2
    real(c_double) :: val(dim_1,dim_2)
    end subroutine asyncio_write_double_array2d_c

#ifdef GPU
  attributes(device) &
#endif
    subroutine asyncio_write_double_array3d_c(val, dim_1, dim_2, dim_3) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1, dim_2, dim_3
    real(c_double) :: val(dim_1,dim_2,dim_3)
    end subroutine asyncio_write_double_array3d_c

#ifdef GPU
  attributes(device) &
#endif
    subroutine asyncio_write_double_array4d_c(val, dim_1, dim_2, dim_3, dim_4) bind(C)
    use iso_c_binding
    implicit none
    integer(c_int), value :: dim_1, dim_2, dim_3, dim_4
    real(c_double) :: val(dim_1,dim_2,dim_3,dim_4)
    end subroutine asyncio_write_double_array4d_c

#ifdef GPU    
    attributes(device) &
#endif
    subroutine asyncio_end() bind(C)
    end subroutine asyncio_end
    
    subroutine asyncio_flush() bind(C)
    end subroutine asyncio_flush

  end interface

contains

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_read_begin_default_unit_default_format(unt, frmt, iostat)
  use iso_c_binding
  implicit none
  character(c_char), value :: unt, frmt
  integer(c_int), optional :: iostat
  integer(c_int) :: iostat_dummy
  if (present(iostat)) then
    call asyncio_begin_default_unit_default_format_c('r', unt, frmt, iostat)
  else
    call asyncio_begin_default_unit_default_format_c('r', unt, frmt, iostat_dummy)
  endif
  end subroutine asyncio_read_begin_default_unit_default_format

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_read_begin_unit_unformatted(unt, iostat)
  use iso_c_binding
  implicit none
  integer(c_int), value :: unt
  integer(c_int), optional :: iostat
  integer(c_int) :: iostat_dummy
  if (present(iostat)) then
    call asyncio_begin_unit_unformatted_c('r', unt, iostat)
  else
    call asyncio_begin_unit_unformatted_c('r', unt, iostat_dummy)
  endif
  end subroutine asyncio_read_begin_unit_unformatted

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_read_begin_unit_default_format(unt, frmt, iostat)
  use iso_c_binding
  implicit none
  integer(c_int), value :: unt
  character(c_char), value :: frmt
  integer(c_int), optional :: iostat
  integer(c_int) :: iostat_dummy
  if (present(iostat)) then
    call asyncio_begin_unit_default_format_c('r', unt, frmt, iostat)
  else
    call asyncio_begin_unit_default_format_c('r', unt, frmt, iostat_dummy)
  endif
  end subroutine asyncio_read_begin_unit_default_format

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_read_begin_default_unit_formatted(unt, func, frmt, iostat)
  use iso_c_binding
  implicit none
  character(c_char), value :: unt
  integer :: func
  integer(c_int), value :: frmt
  integer(c_int), optional :: iostat
  integer(c_int) :: iostat_dummy
  if (present(iostat)) then
    call asyncio_begin_default_unit_formatted_c('r', unt, func, frmt, iostat)
  else
    call asyncio_begin_default_unit_formatted_c('r', unt, func, frmt, iostat_dummy)
  endif
  end subroutine asyncio_read_begin_default_unit_formatted

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_read_begin_unit_formatted(unt, func, frmt, iostat)
  use iso_c_binding
  implicit none
  integer(c_int), value :: unt
  integer :: func
  integer(c_int), value :: frmt
  integer(c_int), optional :: iostat
  integer(c_int) :: iostat_dummy
  if (present(iostat)) then
    call asyncio_begin_unit_formatted_c('r', unt, func, frmt, iostat)
  else
    call asyncio_begin_unit_formatted_c('r', unt, func, frmt, iostat_dummy)
  endif
  end subroutine asyncio_read_begin_unit_formatted

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_begin_default_unit_default_format(unt, frmt, iostat)
  use iso_c_binding
  implicit none
  character(c_char), value :: unt, frmt
  integer(c_int), optional :: iostat
  integer(c_int) :: iostat_dummy
  if (present(iostat)) then
    call asyncio_begin_default_unit_default_format_c('w', unt, frmt, iostat)
  else
    call asyncio_begin_default_unit_default_format_c('w', unt, frmt, iostat_dummy)
  endif
  end subroutine asyncio_write_begin_default_unit_default_format

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_begin_unit_unformatted(unt, iostat)
  use iso_c_binding
  implicit none
  integer(c_int), value :: unt
  integer(c_int), optional :: iostat
  integer(c_int) :: iostat_dummy
  if (present(iostat)) then
    call asyncio_begin_unit_unformatted_c('w', unt, iostat)
  else
    call asyncio_begin_unit_unformatted_c('w', unt, iostat_dummy)
  endif
  end subroutine asyncio_write_begin_unit_unformatted

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_begin_unit_default_format(unt, frmt, iostat)
  use iso_c_binding
  implicit none
  integer(c_int), value :: unt
  character(c_char), value :: frmt
  integer(c_int), optional :: iostat
  integer(c_int) :: iostat_dummy
  if (present(iostat)) then
    call asyncio_begin_unit_default_format_c('w', unt, frmt, iostat)
  else
    call asyncio_begin_unit_default_format_c('w', unt, frmt, iostat_dummy)
  endif
  end subroutine asyncio_write_begin_unit_default_format

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_begin_default_unit_formatted(unt, func, frmt, iostat)
  use iso_c_binding
  implicit none
  character(c_char), value :: unt
  integer :: func
  integer(c_int), value :: frmt
  integer(c_int), optional :: iostat
  integer(c_int) :: iostat_dummy
  if (present(iostat)) then
    call asyncio_begin_default_unit_formatted_c('w', unt, func, frmt, iostat)
  else
    call asyncio_begin_default_unit_formatted_c('w', unt, func, frmt, iostat_dummy)
  endif
  end subroutine asyncio_write_begin_default_unit_formatted

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_begin_unit_formatted(unt, func, frmt, iostat)
  use iso_c_binding
  implicit none
  integer(c_int), value :: unt
  integer :: func
  integer(c_int), value :: frmt
  integer(c_int), optional :: iostat
  integer(c_int) :: iostat_dummy
  if (present(iostat)) then
    call asyncio_begin_unit_formatted_c('w', unt, func, frmt, iostat)
  else
    call asyncio_begin_unit_formatted_c('w', unt, func, frmt, iostat_dummy)
  endif
  end subroutine asyncio_write_begin_unit_formatted

  subroutine asyncio_read_integer(val)
  use iso_c_binding
  implicit none
  integer(c_int) :: val
  call asyncio_read_integer_c(val)
  end subroutine asyncio_read_integer

  subroutine asyncio_read_long_long(val)
  use iso_c_binding
  implicit none
  integer(c_long_long) :: val
  call asyncio_write_long_long_c(val)
  end subroutine asyncio_read_long_long

  subroutine asyncio_read_float(val)
  use iso_c_binding
  implicit none
  real(c_float) :: val
  call asyncio_read_float_c(val)
  end subroutine asyncio_read_float

  subroutine asyncio_read_double(val)
  use iso_c_binding
  implicit none
  real(c_double) :: val
  call asyncio_read_double_c(val)
  end subroutine asyncio_read_double

  subroutine asyncio_read_logical(val)
  use iso_c_binding
  implicit none
  logical(c_bool) :: val
  call asyncio_read_logical_c(val)
  end subroutine asyncio_read_logical

  subroutine asyncio_read_char(val)
  use iso_c_binding
  implicit none
  character(len=*) :: val
  call asyncio_read_char_c(val,len(val))
  end subroutine asyncio_read_char

  subroutine asyncio_read_char_array1d(val, dim_1)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1
  character(len=*) :: val(dim_1)
  integer(c_int) :: lengths(dim_1), i
  do i = 1, dim_1
    lengths(i) = len(val(i))
  enddo
  call asyncio_read_char_array1d_c(val, dim_1, lengths)
  end subroutine asyncio_read_char_array1d

  subroutine asyncio_read_char_array2d(val, dim_1, dim_2)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1, dim_2
  character(len=*) :: val(dim_1, dim_2)
  integer(c_int) :: lengths(dim_1, dim_2), i, j
  do i = 1, dim_1
    do j = 1, dim_2
      lengths(i,j) = len(val(i,j))
    enddo
  enddo
  call asyncio_read_char_array2d_c(val, dim_1, dim_2, lengths)
  end subroutine asyncio_read_char_array2d

  subroutine asyncio_read_logical_array1d(val, dim_1)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1
  logical :: val(dim_1)
  call asyncio_read_logical_array1d_c(val, dim_1)
  end subroutine asyncio_read_logical_array1d

  subroutine asyncio_read_integer_array1d(val, dim_1)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1
  integer(c_int) :: val(dim_1)
  call asyncio_read_integer_array1d_c(val, dim_1)
  end subroutine asyncio_read_integer_array1d

  subroutine asyncio_read_integer_array2d(val, dim_1, dim_2)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1, dim_2
  integer(c_int) :: val(dim_1,dim_2)
  call asyncio_read_integer_array2d_c(val, dim_1, dim_2)
  end subroutine asyncio_read_integer_array2d

  subroutine asyncio_read_float_array1d(val, dim_1)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1
  real(c_float) :: val(dim_1)
  call asyncio_read_float_array1d_c(val, dim_1)
  end subroutine asyncio_read_float_array1d

  subroutine asyncio_read_double_array1d(val, dim_1)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1
  real(c_double) :: val(dim_1)
  call asyncio_read_double_array1d_c(val, dim_1)
  end subroutine asyncio_read_double_array1d

  subroutine asyncio_read_double_array2d(val, dim_1, dim_2)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1, dim_2
  real(c_double) :: val(dim_1,dim_2)
  call asyncio_read_double_array2d_c(val, dim_1, dim_2)
  end subroutine asyncio_read_double_array2d

  subroutine asyncio_read_double_array3d(val, dim_1, dim_2, dim_3)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1, dim_2, dim_3
  real(c_double) :: val(dim_1,dim_2,dim_3)
  call asyncio_read_double_array3d_c(val, dim_1, dim_2, dim_3)
  end subroutine asyncio_read_double_array3d

  subroutine asyncio_read_double_array4d(val, dim_1, dim_2, dim_3, dim_4)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1, dim_2, dim_3, dim_4
  real(c_double) :: val(dim_1,dim_2,dim_3,dim_4)
  call asyncio_read_double_array4d_c(val, dim_1, dim_2, dim_3, dim_4)
  end subroutine asyncio_read_double_array4d

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_integer(val)
  use iso_c_binding
  implicit none
  integer(c_int), value :: val
  call asyncio_write_integer_c(val)
  end subroutine asyncio_write_integer

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_long_long(val)
  use iso_c_binding
  implicit none
  integer(c_long_long), value :: val
  call asyncio_write_long_long_c(val)
  end subroutine asyncio_write_long_long

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_float(val)
  use iso_c_binding
  implicit none
  real(c_float), value :: val
  call asyncio_write_float_c(val)
  end subroutine asyncio_write_float

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_double(val)
  use iso_c_binding
  implicit none
  real(c_double), value :: val
  call asyncio_write_double_c(val)
  end subroutine asyncio_write_double

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_logical(val)
  use iso_c_binding
  implicit none
  logical(c_bool), value :: val
  call asyncio_write_logical_c(val)
  end subroutine asyncio_write_logical

#ifndef GPU
  subroutine asyncio_write_char(val)
  use iso_c_binding
  implicit none
  character(len=*) :: val
  call asyncio_write_char_c(val,len(val))
  end subroutine asyncio_write_char

  subroutine asyncio_write_char_array1d(val, dim_1)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1
  character(len=*) :: val(dim_1)
  integer(c_int) :: lengths(dim_1), i
  do i = 1, dim_1
    lengths(i) = len(val(i))
  enddo
  call asyncio_write_char_array1d_c(val, dim_1, lengths)
  end subroutine asyncio_write_char_array1d

  subroutine asyncio_write_char_array2d(val, dim_1, dim_2)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1, dim_2
  character(len=*) :: val(dim_1, dim_2)
  integer(c_int) :: lengths(dim_1, dim_2), i, j
  do i = 1, dim_1
    do j = 1, dim_2
      lengths(i,j) = len(val(i,j))
    enddo
  enddo
  call asyncio_write_char_array2d_c(val, dim_1, dim_2, lengths)
  end subroutine asyncio_write_char_array2d
#endif

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_logical_array1d(val, dim_1)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1
  logical :: val(dim_1)
  call asyncio_write_logical_array1d_c(val, dim_1)
  end subroutine asyncio_write_logical_array1d

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_integer_array1d(val, dim_1)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1
  integer(c_int) :: val(dim_1)
  call asyncio_write_integer_array1d_c(val, dim_1)
  end subroutine asyncio_write_integer_array1d

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_integer_array2d(val, dim_1, dim_2)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1, dim_2
  integer(c_int) :: val(dim_1,dim_2)
  call asyncio_write_integer_array2d_c(val, dim_1, dim_2)
  end subroutine asyncio_write_integer_array2d

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_float_array1d(val, dim_1)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1
  real(c_float) :: val(dim_1)
  call asyncio_write_float_array1d_c(val, dim_1)
  end subroutine asyncio_write_float_array1d

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_double_array1d(val, dim_1)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1
  real(c_double) :: val(dim_1)
  call asyncio_write_double_array1d_c(val, dim_1)
  end subroutine asyncio_write_double_array1d

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_double_array2d(val, dim_1, dim_2)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1, dim_2
  real(c_double) :: val(dim_1,dim_2)
  call asyncio_write_double_array2d_c(val, dim_1, dim_2)
  end subroutine asyncio_write_double_array2d

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_double_array3d(val, dim_1, dim_2, dim_3)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1, dim_2, dim_3
  real(c_double) :: val(dim_1,dim_2,dim_3)
  call asyncio_write_double_array3d_c(val, dim_1, dim_2, dim_3)
  end subroutine asyncio_write_double_array3d

#ifdef GPU
  attributes(device) &
#endif
  subroutine asyncio_write_double_array4d(val, dim_1, dim_2, dim_3, dim_4)
  use iso_c_binding
  implicit none
  integer(c_int), value :: dim_1, dim_2, dim_3, dim_4
  real(c_double) :: val(dim_1,dim_2,dim_3,dim_4)
  call asyncio_write_double_array4d_c(val, dim_1, dim_2, dim_3, dim_4)
  end subroutine asyncio_write_double_array4d
  
  end module

