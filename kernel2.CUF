#ifdef GPU
  module function_gpu
#else
  module function
#endif
  use iso_c_binding
  integer :: funcptr
#ifdef GPU
  attributes(device) :: funcptr
#else
  bind(C,name="__FUNC_kernel2") :: funcptr
#endif
  character(5), bind(C,name="__GPUFMT_kernel2_123") :: l_123 = "(I8)" // c_null_char

  character(18), bind(C,name="__GPUFMT_kernel2_1") :: l_1 = "(1p,6(2x,e25.18))" // c_null_char

  character(24), bind(C,name="__GPUFMT_kernel2_2") :: l_2 = "('check string output')" // c_null_char

  character(60), bind(C,name="__GPUFMT_kernel2_3") :: l_3 = "('check that double output ',E15.3,' is fine')" // c_null_char

  end module



#ifdef GPU
  attributes(global) &
#endif
  subroutine kernel2
#ifdef GPU
  use asyncio_gpu
  use function_gpu
#else
  use asyncio
  use function
#endif
  implicit none

  integer, parameter :: length = 1024
  real, dimension(length) :: arr
  integer :: i
  integer(8) :: i8

  do i = 1, length
    arr(i) = i
  enddo

  i8 = i

  call asyncio_write_begin('*','*')
  call asyncio_write(arr(length / 8))
  call asyncio_write(arr(length))
  call asyncio_write(length)
  call asyncio_write(i8)
  call asyncio_end()

  call asyncio_write_begin('*', funcptr, 123)
  call asyncio_write(i8)
  call asyncio_end()

  call asyncio_write_begin('*','*')
  call asyncio_write(arr(length / 16))
  call asyncio_write(arr(length))
  call asyncio_write(length)
  call asyncio_write(i8)
  call asyncio_end()

  call asyncio_write_begin(3)
  call asyncio_write(arr(length) + 2)
  call asyncio_write(arr(length / 4))
  call asyncio_end()

  call asyncio_write_begin(0, funcptr, 123)
  call asyncio_write(i8)
  call asyncio_end()

  call asyncio_write_begin('*',funcptr,1)
  do i=1,3
    call asyncio_write(arr(i+1))
    call asyncio_write(arr(i+2))
    call asyncio_write(arr(i+3))
    call asyncio_write(arr(i+4))
    call asyncio_write(arr(i+5))
    call asyncio_write(arr(i+6))
  enddo
  call asyncio_end()

  call asyncio_write_begin('*',funcptr,2)
  call asyncio_end()

  call asyncio_write_begin('*',funcptr,3)
  call asyncio_write(2.0)
  call asyncio_end()

  end subroutine kernel2

